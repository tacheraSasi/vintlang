// Complete test of debounce functionality with proper waiting
println("Testing debounce behavior...")

// Create a simple function to test with
let counter = 0
let incrementCounter = func() {
    counter = counter + 1
    println("Counter incremented to:", counter)
}

// Create a debounced version with 200ms delay
let debouncedIncrement = debounce(200, incrementCounter)

// Test rapid calls - only the last one should execute
println("Making rapid calls...")
debouncedIncrement()
debouncedIncrement()
debouncedIncrement()
println("Made 3 rapid calls to debounced function")

// Give time for the debounced function to execute
println("Sleeping 300ms to allow execution...")
sleep(300)

// Check if the counter was incremented
println("Counter after sleep:", counter)

// Test with print function
println("Testing with print function:")
let debouncedPrint = debounce(100, print)

debouncedPrint("First message")
debouncedPrint("Second message")  
debouncedPrint("Final message")   // Only this should print

println("Sleeping 200ms to allow print execution...")
sleep(200)

// Final counter check
println("Final counter value:", counter)