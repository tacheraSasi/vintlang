// Express.js-like HTTP Server Example for VintLang
// This example demonstrates how to create a REST API server using VintLang's http module

import http

// Create the Express-like app instance
http.app()

// Basic routes
http.get("/", func(req, res) {
    println(req.headers)
    // This function will be registered as the handler for GET /
    println("Home page accessed")
})

http.get("/about", func(req, res) {
    println("About page accessed") 
})

// API routes
http.get("/api/status", func(req, res) {
    println("API status check")
})

http.get("/api/users", func(req, res) {
    println("Getting all users")
})

http.post("/api/users", func(req, res) {
    println("Creating a new user")
})

http.put("/api/users/123", func(req, res) {
    println("Updating user with ID 123")
})

http.delete("/api/users/123", func(req, res) {
    println("Deleting user with ID 123")
})

// Middleware (currently registered but execution pending full evaluator integration)
http.use(func(req, res, next) {
    println("Middleware: Request logged")
})

// Display configured routes
println("ðŸš€ VintLang Express-like HTTP Server")
println("====================================")
println("Routes configured:")
println("  GET    /")
println("  GET    /about") 
println("  GET    /api/status")
println("  GET    /api/users")
println("  POST   /api/users") 
println("  PUT    /api/users/123")
println("  DELETE /api/users/123")
println("")

// Start the server
println("Starting server...")
http.listen(3000, "ðŸŒŸ Server running at http://localhost:3000")

/*
Usage examples:
  curl http://localhost:3000/
  curl http://localhost:3000/about
  curl http://localhost:3000/api/status
  curl http://localhost:3000/api/users
  curl -X POST http://localhost:3000/api/users
  curl -X PUT http://localhost:3000/api/users/123
  curl -X DELETE http://localhost:3000/api/users/123

Features implemented:
âœ“ Express.js-like syntax with http.app()
âœ“ Route registration: GET, POST, PUT, DELETE, PATCH
âœ“ Server listening with graceful shutdown
âœ“ Route matching and 404 handling
âœ“ Function handler registration
âœ“ Middleware registration (http.use)

Coming soon:
- Full function handler execution with req/res objects
- Request body parsing and response methods
- Route parameters and query string support
- Enhanced middleware execution
*/